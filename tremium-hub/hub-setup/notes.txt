Steps to push to registry : 

    1) cat TremiumDevEditor.json | docker login -u _json_key --password-stdin https://gcr.io
    
    2) sudo docker tag quickstart-image gcr.io/tremium/quickstart-image:tag1

    3) sudo docker push gcr.io/tremium/quickstart-image:tag1


Steps to pull from registry : 

    1) cat TremiumDevEditor.json | docker login -u _json_key --password-stdin https://gcr.io

    2) docker pull [HOSTNAME]/[PROJECT-ID]/[IMAGE]:[TAG]
        
        - ex : docker pull gcr.io/tremium/dev_test_node


Docker image naming convention : 

    (organisation)_(device type)_(mounted machine)_(*index)_(component)

        - (organisation) : name of the client organisation
        - (device type) :  Tremium Node or Tremium Hub
        - (mounted machine) :  type of machinerie the device is mounted on
        - (index) : (optional) specific index of the Node device (this is for targeted updates)
        - (component) : name of the software component 

        ex : dev_node_compressor_communication-component

    *** in tar format : dev_node_compressor_communication-component.tar


Docker (Node and Hub) ID naming convention : 

    (organisation)_(device type)_(mounted machine)_(index)

        - (organisation) : name of the client organisation
        - (device type) :  Tremium Node or Tremium Hub
        - (mounted machine) :  type of machinerie the device is mounted on
        - (index) : number unique to the device in the organisation

        ex : dev_node_compressor_5  


To run docker commands from inside a Docker

    --> make sure the login happens before the container is launched
        and mounted

    --> docker run -v /var/run/docker.sock:/var/run/docker.sock ...


Bluetooth defined messages : 


    CHECK_AVAILABLE_UPDATES (node id) : 
        
        - (node id) : id of the node requesting an update

        * returns a list of available docker images (most recent for every component).
        * its the nodes job to check if one of the returned images should be "loaded"


    GET_UPDATE (image file name) : 

        - (image file name) : name of the archive image file to transafer

        * transfers the target file to the client (Tremium Node)


    STORE_FILE (data file name) : 

        - (file name) : name of the file to be transafered to hub storage 

        * transafers the target file to the server (Tremium Hub)


///////////////////////////////////////////////////////////////////////////////////////////////////////

Running commands inside a container : 

    --> docker exec -it (container name) (command)
    --> docker exec -it feaf7de9c841 bash -c 'python3 bluetooth-interface.py "$TREMIUM_CONFIG_FILE"'

Tremium Hub Docker file : 

    - a step to add the proper environment variables will have to be added

        - google auth vars
        - tremium main directory
        - tremium config file path

    - a step to create the cron job for the the data collector component will have to be
      added.

        ** run this step after defining the necessary environment variables

        - cron job : 

            --> 0 * * * * ./$TREMIUM_MAIN_DIR/launch-data-collector.sh

Docker run command : 

    --> sudo docker run -t -i --privileged -v /var/run/sdp:/var/run/sdp -v /etc/systemd/system:/etc/systemd/system -v /dev/bus/usb:/dev/bus/usb -v /var/run/dbus:/var/run/dbus -v /sys/class/bluetooth:/sys/class/bluetooth  -v /var/lib/bluetooth:/var/lib/bluetooth --net=host (image id)

Docker monitor resource usage : 

    --> docker stats (container id)