Steps to push to registry : 

    1) cat TremiumDevEditor.json | docker login -u _json_key --password-stdin https://gcr.io
    
    2) sudo docker tag quickstart-image gcr.io/tremium/quickstart-image:tag1

    3) sudo docker push gcr.io/tremium/quickstart-image:tag1


Steps to pull from registry : 

    1) cat TremiumDevEditor.json | docker login -u _json_key --password-stdin https://gcr.io

    2) docker pull [HOSTNAME]/[PROJECT-ID]/[IMAGE]:[TAG]
        
        - ex : docker pull gcr.io/tremium/dev_test_node


Docker image naming convention : 

    (organisation)_(device type)_(mounted machine)_(*index)_(component)

        - (organisation) : name of the client organisation
        - (device type) :  Tremium Node or Tremium Hub
        - (mounted machine) :  type of machinerie the device is mounted on
        - (index) : (optional) specific index of the Node device (this is for targeted updates)
        - (component) : name of the software component 

        ex : dev_node_compressor_communication-component

    *** in tar format : dev_node_compressor_communication-component.tar


Docker (Node and Hub) ID naming convention : 

    (organisation)_(device type)_(mounted machine)_(index)

        - (organisation) : name of the client organisation
        - (device type) :  Tremium Node or Tremium Hub
        - (mounted machine) :  type of machinerie the device is mounted on
        - (index) : number unique to the device in the organisation

        ex : dev_node_compressor_5  


///////////////////////////////////////////////////////////////////////////////////////////////////////
Docker commands and stuff


Running commands inside a container : 

    --> docker exec -it (container name) (command)
    --> docker exec -it feaf7de9c841 bash -c 'python bluetooth-interface.py "$TREMIUM_CONFIG_FILE"'


Docker monitor resource usage : 

    --> docker stats (container id)

////////////////////////////////////////////////////////////////////////////////////////////////////////
Audio and specifications

Audio export request format

    --> (timestamp str)__(label)
        - the request is a string
        - (timestamp) : the target event start time (int(timestamp))
        - (label) : the classification label of the events